from __future__ import annotations
import base64, binascii, json, hmac, hashlib, urllib.parse

raw = "user=daf;app=admin;date=10/09/11"

# Base64 (standard)
b64 = base64.b64encode(raw.encode('utf-8')).decode('ascii')

# Hex
hexed = binascii.hexlify(raw.encode('utf-8')).decode('ascii')

# URL-encoded (application/x-www-form-urlencoded style)
url_enc = urllib.parse.quote_plus(raw)

# JWT (HS256) with payload parsed into a dict
header = {"alg": "HS256", "typ": "JWT"}
payload = {"user":"daf", "app":"admin", "date":"10/09/11"}

def base64url_encode(data: bytes) -> str:
    return base64.urlsafe_b64encode(data).rstrip(b'=').decode('ascii')

header_b64 = base64url_encode(json.dumps(header, separators=(',',':')).encode('utf-8'))
payload_b64 = base64url_encode(json.dumps(payload, separators=(',',':')).encode('utf-8'))
secret = b"secret123"  # example secret
signing_input = f"{header_b64}.{payload_b64}".encode('ascii')
signature = hmac.new(secret, signing_input, hashlib.sha256).digest()
signature_b64 = base64url_encode(signature)
jwt_hs256 = f"{header_b64}.{payload_b64}.{signature_b64}"

# Also create a simple "opaque" token by hashing the raw string with SHA256 (hex)
sha256_hex = hashlib.sha256(raw.encode('utf-8')).hexdigest()

print("Original string:")
print(raw)
print()
print("Encodings / tokens:")
print("1) Base64 (standard):")
print(b64)
print()
print("2) Hex (hexlify of UTF-8 bytes):")
print(hexed)
print()
print("3) URL-encoded (quote_plus):")
print(url_enc)
print()
print("4) JWT (HS256) using example secret 'secret123':")
print(jwt_hs256)
print()
print("5) Opaque token (SHA-256 hex digest):")
print(sha256_hex)

# Also show how to reverse the base64 quickly (for user's convenience)
decoded_b64 = base64.b64decode(b64).decode('utf-8')
print()
print("Quick verification (base64 decoded):")
print(decoded_b64)
